image: anagolay/ci-linux:050979ef

stages:
  - check
  - test
  - audit
  - build
  - release

variables: &default-vars
  GIT_STRATEGY: fetch
  GIT_DEPTH: 100
  CARGO_INCREMENTAL: 0
  STAGE: "prod"
  ARCH: "x86_64"
  DOCKER_TLS_CERTDIR: "/certs"
  OCI_REGISTRY: "docker.io"
  # this CI-LINUX image tag to be used with the other images. the ci doesn't have the latest yet
  CI_LINUX_TAG: "050979ef"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# https://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  key: $CI_COMMIT_REF_SLUG
  # paths: # the target is too bog for normal speed upload
  # - target/
  # policy: pull-push # default

.build-push-oci-image: &build-push-oci-image
  image: quay.io/buildah/stable
  variables: &oci-build-vars
    <<: *default-vars
    GIT_STRATEGY: none
    DOCKERFILE: ./devops/$STAGE/$PRODUCT.Dockerfile
    IMAGE_NAME: $OCI_REGISTRY/anagolay/$PRODUCT
  script:
    - test "$DOCKER_HUB_USER" -a "$DOCKER_HUB_PASS" ||
      ( echo "no docker credentials provided"; exit 1 )
    - buildah bud
      --format=docker
      --build-arg GIT_LATEST_REVISION="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --tag "$IMAGE_NAME:$VERSION"
      --file "$DOCKERFILE" .
    - echo "$DOCKER_HUB_PASS" |
      buildah login --username "$DOCKER_HUB_USER" --password-stdin $OCI_REGISTRY
    - buildah info
    - buildah push --format=v2s2 "$IMAGE_NAME:$VERSION"
  after_script:
    - buildah logout --all

.build-push-oci-image-with-latest: &build-push-oci-image-with-latest
  <<: *build-push-oci-image
  script:
    - test "$DOCKER_HUB_USER" -a "$DOCKER_HUB_PASS" ||
      ( echo "no docker credentials provided"; exit 1 )
    - buildah bud
      --format=docker
      --build-arg GIT_LATEST_REVISION="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --tag "$IMAGE_NAME:$VERSION"
      --file "$DOCKERFILE" .
    - echo "$DOCKER_HUB_PASS" |
      buildah login --username "$DOCKER_HUB_USER" --password-stdin $OCI_REGISTRY
    - buildah info
    - buildah tag "$IMAGE_NAME:$VERSION" "$IMAGE_NAME:latest"
    - buildah push --format=v2s2 "$IMAGE_NAME:$VERSION"
    - buildah push --format=v2s2 "$IMAGE_NAME:latest"

.install-ipfs-and-setup: &install-ipfs-and-setup
  variables:
    IPFS_PATH: .ipfs
  before_script:
    - echo "Downloading anagolay ipfs CLI which works with the ipfsAuthProxy."
    - |
      curl https://ipfs.anagolay.network/ipfs/bafybeiebighwouxt3vkttuhfcwb3dgr7vzxpujlqfzvngt7omnrizjajfy > /usr/local/bin/ipfsCli
      chmod +x /usr/local/bin/ipfsCli

.compiler-info: &compiler-info
  - rustup show
  - cargo --version
  - rustup +nightly show
  - cargo +nightly --version
  - sccache --version

test-code:
  stage: test
  before_script:
    - *compiler-info
  script:
    - makers ci-flow

oci-base:
  <<: *build-push-oci-image
  needs: ["test-code"]
  stage: build
  variables:
    <<: *oci-build-vars
    PRODUCT: ci-linux
    STAGE: prod
    VERSION: $CI_COMMIT_SHORT_SHA
    GIT_STRATEGY: clone
  services:
    - docker:dind
  when: manual
  # only:
  #   - main

# make a production grade image
oci-release:
  <<: *build-push-oci-image-with-latest
  needs: ["test-code"]
  stage: release
  variables:
    <<: *oci-build-vars
    PRODUCT: anagolay
    STAGE: prod
    VERSION: $CI_COMMIT_SHORT_SHA
    CI_LINUX_TAG: 050979ef
    GIT_STRATEGY: clone
  services:
    - docker:dind
  when: manual
  # only:
  #   - main

# build the docs and publish them
docs-build-upload-to-ipfs:
  needs: ["test-code"]
  stage: release
  <<: *install-ipfs-and-setup
  script:
    # - set -e
    - echo 'Building docs ...'
    - makers docs-flow

    - echo "Uploading to IPFS ..."
    - ipfsCli upload --pin --onlyCid docs/api  > ANAGOLAY_DOCS_CID
    - echo "Published with the CID - $(cat ANAGOLAY_DOCS_CID)"
    - echo "https://ipfs.anagolay.network/ipfs/$(cat ANAGOLAY_DOCS_CID)/anagolay/index.html"
  when: manual
  # only:
  # - main
