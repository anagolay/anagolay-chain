// This file is part of Anagolay Foundation.

// Copyright (C) 2019-2022 Anagolay Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

use anagolay_support::{
  AnagolayRecord, AnagolayStructure, AnagolayStructureData, AnagolayStructureExtra, AnagolayVersionData,
  AnagolayVersionExtra, ArtifactType, Characters, CreatorId, ForWhat, VersionId, WasmArtifactSubType,
};
use codec::{Decode, Encode};
use sp_runtime::RuntimeDebug;
use sp_std::{clone::Clone, collections::btree_map::BTreeMap, default::Default, vec, vec::Vec};

/// OperationVersionReference
#[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug)]
pub struct OperationVersionReference {
  pub operation_version_id: VersionId,
  pub config: BTreeMap<Characters, Vec<Characters>>,
}

/// WorkflowSegment   
/// @TODO
#[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug)]
pub struct WorkflowSegment {
  pub input: Vec<u8>,
  pub sequence: Vec<OperationVersionReference>,
}

/// Workflow Data, used to generate `manifest.id`
#[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug)]
pub struct WorkflowData {
  /// Operation name
  pub name: Characters,
  /// Use markdown but not html
  pub description: Characters,
  /// @TODO
  pub creator: CreatorId,
  /// @TODO
  pub groups: Vec<ForWhat>,
  /// @TODO
  pub segments: Vec<WorkflowSegment>,
}

impl AnagolayStructureData for WorkflowData {}

#[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug)]
pub struct WorkflowExtra {}
impl AnagolayStructureExtra for WorkflowExtra {}
impl Default for WorkflowExtra {
  fn default() -> Self {
    WorkflowExtra {}
  }
}

impl Default for WorkflowData {
  fn default() -> Self {
    WorkflowData {
      name: b"".to_vec(),
      creator: CreatorId::default(),
      description: vec![],
      groups: vec![ForWhat::default()],
      segments: vec![],
    }
  }
}

pub type Workflow = AnagolayStructure<WorkflowData, WorkflowExtra>;

/// Storage record type
pub type WorkflowRecord<T> =
  AnagolayRecord<Workflow, <T as frame_system::Config>::AccountId, <T as frame_system::Config>::BlockNumber>;

/// Workflow Version artifact types. This enum corresponds to the different types of
/// packages created by the publisher service when an Workflow Version is published
#[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug)]
pub enum WorkflowArtifactType {
  /// Rust crate. This is a `tar.gz` of the git repo not containing the `target`   
  CRATE,
  /// Wasm artifacts built by the wasm-pack. They are split in subtypes where every type contains
  /// the same wasm file, and also includes the various `.js` and `.d.ts` files to increase
  /// developers experience
  WASM(WasmArtifactSubType),
  /// This refers to the documentation generated by the `cargo docs`. The entry point is predictable
  /// and always will be in following format `${ipfs_cid}/${manifest.data.name}/index.html`
  DOCS,
}

impl ArtifactType for WorkflowArtifactType {}

/// Alias for the data type of the Workflow version
pub type WorkflowVersionData = AnagolayVersionData<WorkflowArtifactType>;

/// `WorkflowVersion` type, alias of [`AnagolayStructure<WorkflowVersionData,
/// AnagolayVersionExtra>`]
pub type WorkflowVersion = AnagolayStructure<WorkflowVersionData, AnagolayVersionExtra>;

/// This is the Storage record of Operation Version.
pub type WorkflowVersionRecord<T> =
  AnagolayRecord<WorkflowVersion, <T as frame_system::Config>::AccountId, <T as frame_system::Config>::BlockNumber>;
